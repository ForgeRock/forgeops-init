{
  "v1": {
    "config": null,
    "helmValues": "# Default values for openidm.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\nreplicaCount: 1\n# Top level domain. Used to create the ingress\ndomain: forgeops.com\nsubdomain: iam\n# Configuration parameters. Common to all charts that require configuration from a\n# source. Currently the only source is a git repo.\nconfig:\n  # Name of the configMap that holds the configuration repository URL and of\n  # the secret required to access it.\n  name: frconfig\n  # Path to our project\n  # path: /git/config/samples/idm/idm-am-ds-integration\n  path: /opt/openidm\n  #\n  # strategy defines how products get their configuration .\n  # Using the git strategy, each helm chart pulls the configuration from git using an init container.\n  strategy: docker\n  # If immutable is true, IDM  will not persist any configuration changes made in the admin UI (or via admin REST calls)\n  # back out to the file system. If you are developing and want to IDM to write configuration changes back out\n  # so they can saved and committed to git, set this to false.\n  immutable: true\nsecret:\n  name: openidm-secrets-env\n# Used to form the FQDN  - see _helpers.tpl\ncomponent: openidm\nimage:\n  repository: gcr.io/engineering-devops/sk-idm\n  tag: latest\n  pullPolicy: IfNotPresent\n  # For development use Always\n  # pullPolicy: Always\n\ngitImage:\n  repository: gcr.io/engineering-devops/sk-idm\n  tag: 6.5.0\n  pullPolicy: IfNotPresent\n# override Java JVM options.\n# For JDK 11 add -XX:+IgnoreUnrecognizedVMOptions --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED\njavaOpts: -Xmx1024m -server -XX:+UseG1GC\n\n# Specific values\nopenidm:\n  repo:\n    # DS external repo\n    # host: userstore-0.userstore\n    # port: 1389\n    # user: \"cn=Directory Manager\"\n    # password: password\n    # postgres values\n    host: postgresql\n    port: 5432\n    user: openidm\n    password: openidm\n    schema: openidm\n    databaseName: openidm\n  # Optional client secret for AM/IDM integration:\n  idpconfig:\n    clientsecret: password\n  prometheus:\n    username: prometheus\n    password: prometheus\n# Optional - if there is a DS userstore configured for synchornization or explict mapping when DS is used as repo\nuserstore:\n  host: userstore-0.userstore\n  password: password\n  port: 1389\n  basecontext: ou=identities\n\nservice:\n  name: openidm\n  # default to ClusterIP\n  #type: NodePort\n  externalPort: 80\n  internalPort: 8080\nresources:\n  limits:\n    cpu: 1000m\n    memory: 1200Mi\n  requests:\n    cpu: 300m\n    memory: 1024Mi\n# Default log level. See templates/configmap/logging.properties. For example, you can use FINE here to\n# see fine grained logging output using kubectl logs.\nlogLevel: INFO\ningress:\n  class: nginx\n  enabled: true\n  annotations:\n    # Nginx specific annotations\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/affinity: cookie\n    nginx.ingress.kubernetes.io/session-cookie-name: route\n    nginx.ingress.kubernetes.io/session-cookie-hash: sha1\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n\nistio:\n  enabled: false\n# Audit log details for log streaming sidecar containers\n# IDM can now stream logs to stdout. This setting will be deprecated in the future.\nauditLogs: []\n# auditLogs:\n#   - name: access-logs\n#     path: \"/opt/openidm/audit/access.audit.json\"\n#   - name: activity-logs\n#     path: \"/opt/openidm/audit/activity.audit.json\"\n#   - name: authentication-logs\n#     path: \"/opt/openidm/audit/authentication.audit.json\"\n#   - name: config-logs\n#     path: \"/opt/openidm/audit/config.audit.json\"\n#   - name: recon-logs\n#     path: \"/opt/openidm/audit/recon.audit.json\"\n#   - name: sync-logs\n#     path: \"/opt/openidm/audit/sync.audit.json\"\n\n# Optional sed filter script that does search / replace after the configuration has been checked out\n# This is a work around until OPENIDM-11529 is fixed\n# example - search for qa and replace with prod:\n# sedFilter: \"s/login.qa.acme.com/login.prod.acme.com/g\n",
    "releaseName": "openidm",
    "helmValuesDefaults": "# Default values for openidm.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\nreplicaCount: 1\n\n# Top level domain. Used to create the ingress\ndomain: example.com\nsubdomain: iam\n\n# Configuration parameters. Common to all charts that require configuration from a\n# source. Currently the only source is a git repo.\nconfig:\n  # Name of the configMap that holds the configuration repository URL and of\n  # the secret required to access it.\n  name: frconfig\n  # Path to our project\n  # path: /git/config/samples/idm/idm-am-ds-integration\n  path: /git/config/7.0/default/idm/sync-with-ldap-bidirectional\n  #\n  # strategy defines how products get their configuration .\n  # Using the git strategy, each helm chart pulls the configuration from git using an init container.\n  strategy: git\n  # If immutable is true, IDM  will not persist any configuration changes made in the admin UI (or via admin REST calls)\n  # back out to the file system. If you are developing and want to IDM to write configuration changes back out\n  # so they can saved and committed to git, set this to false.\n  immutable: true\n\nsecret:\n  name: openidm-secrets-env\n\n# Used to form the FQDN  - see _helpers.tpl\ncomponent: openidm\n\nimage:\n  repository: forgerock-docker-public.bintray.io/forgerock/idm\n  tag: 7.0.0-M1\n  pullPolicy: IfNotPresent\n  # For development use Always\n  # pullPolicy: Always\n\ngitImage:\n  repository: forgerock-docker-public.bintray.io/forgerock/git\n  tag: 6.5.0\n  pullPolicy: IfNotPresent\n\n# override Java JVM options.\n# For JDK 11 add -XX:+IgnoreUnrecognizedVMOptions --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED\njavaOpts: \"-Xmx1024m -server -XX:+UseG1GC\"\n\n# Specific values\nopenidm:\n  repo:\n    # DS external repo\n    # host: userstore-0.userstore\n    # port: 1389\n    # user: \"cn=Directory Manager\"\n    # password: password\n    # postgres values\n     host: postgresql\n     port: 5432\n     user: openidm\n     password: openidm\n     schema: openidm\n     databaseName: openidm\n  # Optional client secret for AM/IDM integration:\n  idpconfig:\n    clientsecret: password\n  prometheus:\n    username: prometheus\n    password: prometheus\n\n# Optional - if there is a DS userstore configured for synchornization or explict mapping when DS is used as repo\nuserstore:\n  host: userstore-0.userstore\n  password: password\n  port: 1389\n  basecontext: \"ou=identities\"\n\nservice:\n  name: openidm\n  # default to ClusterIP\n  #type: NodePort\n  externalPort: 80\n  internalPort: 8080\n\nresources:\n  limits:\n    cpu: 1000m\n    memory: 1200Mi\n  requests:\n    cpu: 300m\n    memory: 1024Mi\n\n# Default log level. See templates/configmap/logging.properties. For example, you can use FINE here to\n# see fine grained logging output using kubectl logs.\nlogLevel: INFO\n\ningress:\n  class: nginx\n  enabled: true\n  annotations:\n    # Nginx specific annotations\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/affinity: \"cookie\"\n    nginx.ingress.kubernetes.io/session-cookie-name: \"route\"\n    nginx.ingress.kubernetes.io/session-cookie-hash: \"sha1\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n\nistio:\n  enabled: false\n\n# Audit log details for log streaming sidecar containers\n# IDM can now stream logs to stdout. This setting will be deprecated in the future.\nauditLogs: []\n# auditLogs:\n#   - name: access-logs\n#     path: \"/opt/openidm/audit/access.audit.json\"\n#   - name: activity-logs\n#     path: \"/opt/openidm/audit/activity.audit.json\"\n#   - name: authentication-logs\n#     path: \"/opt/openidm/audit/authentication.audit.json\"\n#   - name: config-logs\n#     path: \"/opt/openidm/audit/config.audit.json\"\n#   - name: recon-logs\n#     path: \"/opt/openidm/audit/recon.audit.json\"\n#   - name: sync-logs\n#     path: \"/opt/openidm/audit/sync.audit.json\"\n\n# Optional sed filter script that does search / replace after the configuration has been checked out\n# This is a work around until OPENIDM-11529 is fixed\n# example - search for qa and replace with prod:\n# sedFilter: \"s/login.qa.acme.com/login.prod.acme.com/g\n",
    "kustomize": {
      "overlays": {
        "ship": {
          "patches": {
            "/ingress.yaml": "apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/affinity: cookie\n    nginx.ingress.kubernetes.io/session-cookie-hash: sha1\n    nginx.ingress.kubernetes.io/session-cookie-name: route\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n  labels:\n    app: openidm-openidm\n    release: openidm\n    vendor: forgerock\n  name: openidm\nspec:\n  rules:\n  - host: warren.iam.forgeops.com\n    http:\n      paths:\n      - backend:\n          serviceName: openidm\n          servicePort: 80\n        path: /idm\n      - backend:\n          serviceName: openidm\n          servicePort: 80\n        path: /api\n      - backend:\n          serviceName: openidm\n          servicePort: 80\n        path: /openidm\n      - backend:\n          serviceName: openidm\n          servicePort: 80\n        path: /oauthReturn\n      - backend:\n          serviceName: openidm\n          servicePort: 80\n        path: /admin\n  tls:\n  - hosts:\n    - warren.iam.forgeops.com"
          }
        }
      }
    },
    "upstream": "https://github.com/ForgeRock/forgeops/tree/master/helm/openidm",
    "metadata": {
      "applicationType": "helm",
      "name": "openidm",
      "releaseNotes": "Update ds-paas image to ds\nQuote slack url to prevent null expression\nFix istio gateway definition to use subdomain (not istio.subdomain)",
      "version": "6.5.0"
    },
    "contentSHA": "f369f5d8ad935ee1995a6be294bf19fc80eb150ef81103fbb89f90fef045fed0",
    "lifecycle": {
      "stepsCompleted": {
        "intro": true,
        "kustomize": true,
        "kustomize-intro": true,
        "outro": true,
        "render": true,
        "values": true
      }
    }
  }
}