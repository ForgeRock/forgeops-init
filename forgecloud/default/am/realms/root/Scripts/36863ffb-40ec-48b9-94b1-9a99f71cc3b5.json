{
  "metadata": {
    "realm": "/",
    "amsterVersion": "&{version}",
    "entityType": "Scripts",
    "entityId": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "pathParams": {}
  },
  "data": {
    "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "name": "OIDC Claims Script",
    "description": "Default global script for OIDC claims",
    "script": "",
    "default": true,
    "language": "GROOVY",
    "context": "OIDC_CLAIMS",
    "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1433147666269,
    "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1433147666269
  }
}
