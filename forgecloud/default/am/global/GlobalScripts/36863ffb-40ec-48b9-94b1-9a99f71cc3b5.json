{
  "metadata" : {
    "realm" : null,
    "amsterVersion" : "6.0.0",
    "entityType" : "GlobalScripts",
    "entityId" : "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "pathParams" : { }
  },
  "data" : {
    "_id" : "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate" : "1433147666269",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "name" : "OIDC Claims Script",
    "context" : "OIDC_CLAIMS",
    "description" : "Default global script for OIDC claims",
    "language" : "GROOVY",
    "creationDate" : "1433147666269",
    "script" : "",
    "_type" : {
      "_id" : "globalScript",
      "name" : "Scripting",
      "collection" : true
    }
  }
}